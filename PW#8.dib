#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!csharp

using System.Collections.Concurrent;
using System.Threading;

public interface ICommand
{
    void Execute();
    int ReturnNumberOfRepetitions(); 
}

// Если коллекция становится пустой, то потоки-потребители перейдут в состояние блокировки, 
// пока поток-создатель не добавит хотя бы один элемент. Таким образом поток обработчика,
// не будет просто так простаивать, а будет блокироваться, если в локальной очереди нету команд.
// И при этом не будет зависить от потока "Чтения", так что если окажется так, что 
// глобальная очередь оказалась пуста, а в обработчик закинута команда, то
// поток Чтения блокируется, а обработчик до конца выполнит команду, затем тоже блокируется,
// до ввода пользователем новой команды.  

class ServerThread()
{   
    private BlockingCollection<ICommand> queue = new BlockingCollection<ICommand>(1000);
    private BlockingCollection<ICommand> LocalQueue = new BlockingCollection<ICommand>(1000);
    public void ReadQueue() 
    {
        while (!queue.IsCompleted)
        {
            ICommand element = null;
            try
            {
                element = queue.Take();
                int LimitLocalQueue = element.ReturnNumberOfRepetitions(); 
                for (int i = 0; i < LimitLocalQueue; i++)
                {
                    LocalQueue.Add(element);
                }
            }
            catch (InvalidOperationException) { }
            Thread.Sleep(150);
        }
        LocalQueue.CompleteAdding();
    }

    public void Scheduler()
    {
        while (!LocalQueue.IsCompleted)
        {
            ICommand element = null;
            try
            {
                element = LocalQueue.Take();
                element.Execute();
            }
            catch (InvalidOperationException) { }
            Thread.Sleep(200);
        }
    }

    public void EntryQueue()
    {
        for (int i = 0; i < 10; i++)
        {
            int NumberOfCallsPerCommand = 5;
            Print command1 = new Print(NumberOfCallsPerCommand);
            queue.Add(command1);
            Thread.Sleep(100);
        }
        queue.CompleteAdding();
    }
}

class Print: ICommand
{
    private int NumberOfRepetitions; 

    public Print(int NumberOfRepetitions_)
    {
        this.NumberOfRepetitions =  NumberOfRepetitions_;
    }
    public void Execute()
    {
        Console.WriteLine("Someting");
    } 
    public int ReturnNumberOfRepetitions()
    {
        return NumberOfRepetitions;
    }
}

ServerThread server = new ServerThread();

Thread thread1 = new Thread(server.EntryQueue);
Thread thread2 = new Thread(server.ReadQueue);
Thread thread3 = new Thread(server.Scheduler);

thread1.Start();
thread2.Start();
thread3.Start();

thread1.Join();
thread2.Join();
thread3.Join();

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.
